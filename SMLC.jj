/**
 * SMLC v1- Simple Math Language Parser v1
 * Contains the following features:
 * * accept operators + | - | * | / | ^
 * * respect operator precedence
 * * accept nested expressions in parentheses
 * * accept integer numbers
 */
options
{
	static = false;
}

PARSER_BEGIN(SMLC)
	package smlc;

	import java.io.PrintStream ;

	public class SMLC {
		public static void main(String args []) throws ParseException, TokenMgrError {
			SMLC parser = new SMLC( System.in ) ;
			System.out.println("Welcome to SMLI V1 - The Interactive SML Parser");
			System.out.println("Please enter your SML expression");
			System.out.print("=? ");

			parser.Start(System.out) ;
		}
	}

PARSER_END(SMLC)

/*
GRAMMAR:
Nonterminals:
Start := (Expression EOL | HELP)* | EOF
Expression := MultExpression ADDOP MultExpression
MultExpression := PowExpression MULTOP PowExpression
PowExpression := Numerical POWOP PowExpression
Numerical := Number | OPAR Expression CPAR
Number := Digits
Digits := DIGIT DIGIT*

Terminals (Tokens):
OPAR := (
CPAR := )
ADDOP := + | -
MULTOP := * | /
POWOP := ^
DIGIT := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
*/


SKIP : { " " }

TOKEN : /* PARENTHESES */
{
	< OPAR : "(" >
	| < CPAR : ")" >
}

TOKEN : /* OPERATORS */
{
	< PLUS : "+" >
	| < MINUS : "-" >
	| < MULT : "*" >
	| < DIV : "/" >
	| < POWER : "^" >
}

TOKEN : { < NUMBER : <DIGITS> > }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

TOKEN :
{
	< EOL : "\r" | "\n" | "\r\n" >
}

TOKEN : { <HELP : "h"> }

void Start(PrintStream printStream) throws NumberFormatException :
{
	int value;
}
{
	(
	 value = Expression()
	 <EOL>
	 { printStream.println( "=> " + value ); }
	 { printStream.print("=? "); }
	 |
	 <HELP>
	 <EOL>
	 { printStream.println("HELP - SMLI Spec:"); }
	 { printStream.println("add: 'r1 + r2'"); }
	 { printStream.println("subtract: 'r1 - r2'"); }
	 { printStream.println("multiply: 'r1 * r2'"); }
	 { printStream.println("divide: 'r1 / r2'"); }
	 { printStream.println("quit: 'q'"); }
	 { printStream.print("=? "); }
	)*
    <EOF>
    { printStream.println("Goodbye"); }
} 

// Expression: A MultExpression or an addition/subtraction of two
// MultExpression results.
int Expression() throws NumberFormatException :
{
	int i ;
	int value ; 
}
{
	value = MultExpression()
	(
	 <PLUS>
	 i = MultExpression()
	 { value = value + i ; }
	 |
	 <MINUS>
	 i = MultExpression()
	 { value = value - i ; }
	)*
	{ return value ; }
}

// MultExpression: A PowExpression or a multiplication/division of two
// PowExpression results.
int MultExpression() throws NumberFormatException :
{
	int i ;
	int value ;
}
{
	value = PowExpression()
	(
		<MULT>
		i = PowExpression()
		{ value = value * i ; }
		|
		<DIV>
		i = PowExpression()
		{ value = value / i ; }
	)*

	{ return value ; }
}

// PowExpression: A Number (terminal) or an exponentiation of 
int PowExpression() throws NumberFormatException :
{
	int power ;
	int value ;
}
{
	value = Num()
	(
   // This LOOKAHEAD ensures that the compiler checks if the power variable is
   // just a value, or yet another PowExpression()
   LOOKAHEAD(2)
		<POWER>
		power = PowExpression()
		{ value =  (int) Math.pow(value, power) ; }
	)*
	{ return value ; }
}

// Number: The representation of a numerical terminal. Can be either an
// integer, or the result of a nested Expression in parentheses.
int Num() throws NumberFormatException :
{
	Token t ;
	int value ;
}
{
	t = <NUMBER>
	{ value = Integer.parseInt (t.image); }
	{ return value ; }
	|
	<OPAR>
	value = Expression()
	<CPAR>
	{ return value ; }
	|
	<MINUS>
	t = <NUMBER>
	{ value = (Integer.parseInt(t.image) * -1); }

	{ return value ; }
}
