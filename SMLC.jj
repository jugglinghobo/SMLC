/**
 * SMLC v1- Simple Math Language Parser v1
 * Contains the following features:
 * * accept operators + | - | * | / | ^
 * * respect operator precedence
 * * accept nested expressions in parentheses
 * * accept integer numbers
 */
options
{
	static = false;
}

PARSER_BEGIN(SMLC)
	package smlc;

	import java.io.PrintStream ;

	public class SMLC {
		public static void main(String args []) throws ParseException, TokenMgrError {
			SMLC parser = new SMLC( System.in ) ;
			System.out.println("Welcome to SMLI V1 - The Interactive SML Parser");
			System.out.println("Please enter your SML expression");
			System.out.print("=? ");

			parser.Start(System.out) ;
		}
	}

PARSER_END(SMLC)

SKIP : { " " }

TOKEN : /* PARENTHESES */
{
	< OPAR : "(" >
	| < CPAR : ")" >
}

TOKEN : /* OPERATORS */
{
	< PLUS : "+" >
	| < MINUS : "-" >
	| < MULT : "*" >
	| < DIV : "/" >
	| < POWER : "^" >
}

TOKEN : { < NUMBER : <DIGITS> > }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

TOKEN :
{
	< EOL : "\r" | "\n" | "\r\n" >
}

TOKEN : { <HELP : "h" | "H"> }
TOKEN : { <GRAMMAR : "g" | "G"> }

void Start(PrintStream printStream) throws NumberFormatException :
{
	int value;
}
{
	(
	 value = Expression()
	 <EOL>
	 { printStream.println( "=> " + value ); }
	 { printStream.print("=? "); }
	 |
	 <HELP>
	 <EOL>
   {
   String help = "\nSMLI HELP - EXAMPLES\n"
   + "show this help: h\n"
   + "display the SML 1.0 grammar: g\n"
   + "addition: 'a + b'\n"
   + "subtraction: 'a - b'\n"
   + "multiplication: 'a * b'\n"
   + "division: 'a / b'\n"
   + "exponentiation: 'a ^ b'\n"
   + "nested expressions: 'a + (b - c)'\n"
   + "=? ";
   }
   { printStream.print(help); }
   |
   <GRAMMAR>
   <EOL>
   {
     String grammar = "\nSMLI GRAMMAR\n"
       + "\n"
       + "Nonterminals (Terminals/Tokens in uppercase):\n"
       + "--------------------------------------------\n"
       + "Start := (Expression EOL | HELP | GRAMMAR)* | EOF\n"
       + "Expression := MultExpression (PLUS MultExpression | MINUS MultExpression)*\n"
       + "MultExpression := PowExpression (MULT PowExpression | DIV PowExpression)*\n"
       + "PowExpression := UnaryElement (POW PowExpression)*\n"
       + "UnaryElement := MINUS Numerical | Numerical\n"
       + "Numerical := Number | OPAR Expression CPAR\n"
       + "Number := Digits\n"
       + "Digits := DIGIT DIGIT*\n"
       + "\n"
       + "Terminals (Tokens):\n"
       + "-------------------\n"
       + "OPAR := (\n"
       + "CPAR := )\n"
       + "PLUS := +\n"
       + "MINUS := -\n"
       + "MULT := *\n"
       + "DIV := /\n"
       + "POW := ^\n"
       + "DIGIT := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n"
       + "EOL := \\r | \\n | \\r\\n\n"
       + "HELP := h | H\n"
       + "GRAMMAR := g | G\n"
       + "=? ";
   }
   { printStream.print(grammar); }
	)*
    <EOF>
    { printStream.println("Goodbye"); }
} 

// Expression: A MultExpression or an addition/subtraction of two
// MultExpression results.
int Expression() throws NumberFormatException :
{
	int i ;
	int value ; 
}
{
	value = MultExpression()
	(
	 <PLUS>
	 i = MultExpression()
	 { value = value + i ; }
	 |
	 <MINUS>
	 i = MultExpression()
	 { value = value - i ; }
	)*
	{ return value ; }
}

// MultExpression: A PowExpression or a multiplication/division of two
// PowExpression results.
int MultExpression() throws NumberFormatException :
{
	int i ;
	int value ;
}
{
	value = PowExpression()
	(
		<MULT>
		i = PowExpression()
		{ value = value * i ; }
		|
		<DIV>
		i = PowExpression()
		{ value = value / i ; }
	)*

	{ return value ; }
}

// PowExpression: A UnaryElement or an exponentiation of two UnaryElements
int PowExpression() throws NumberFormatException :
{
	int power ;
	int value ;
}
{
	value = UnaryElement()
	(
   // This LOOKAHEAD ensures that the compiler checks if the power variable is
   // just a value, or yet another PowExpression()
   LOOKAHEAD(2)
		<POWER>
		power = PowExpression()
		{ value =  (int) Math.pow(value, power) ; }
	)*
	{ return value ; }
}

// Number: The representation of a numerical terminal. Can be either an
// integer (optional with unary - operator), or the result of a nested Expression in parentheses.

int UnaryElement() throws NumberFormatException :
{
  int value;
}
{
  <MINUS>
  { value = NumericalElement() * -1; }
  { return value; }
  |
  value = NumericalElement()
  { return value; }
}

int NumericalElement() throws NumberFormatException :
{
	Token t ;
	int value ;
}
{
	t = <NUMBER>
	{ value = Integer.parseInt (t.image); }
	{ return value ; }
	|
	<OPAR>
	value = Expression()
	<CPAR>
	{ return value ; }
}
