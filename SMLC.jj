/**
 * SMLC v2 - Simple Math Language Parser v2
 * Parser for Parsing SML v1 with additional features:
 * * support for sin(), cos(), tan()
 * * support for real numbers
 */
options
{
	static = false;
}

PARSER_BEGIN(SMLC)
	package smlc;

	import java.io.PrintStream ;

	public class SMLC {
		public static void main(String args []) throws ParseException, TokenMgrError {
			SMLC parser = new SMLC( System.in ) ;
			System.out.println( "SMLC V2 - Now with 3 more operations!" ) ;
			System.out.println( "Please enter your SML expression" ) ;
			System.out.print( "=? " ) ;

			parser.Start(System.out) ;
		}
	}

PARSER_END(SMLC)

	/* lexical analyzer */
	SKIP :
{
	" "
}

/*
Nonterminals:
Start := Expression
Expression := MultExpression AddOperator MultExpression
MultExpression := ExpExpression MultOperator ExpExpression
ExpExpression := RealNum PowOperator IntNum
RealNum := Number | OPar Expression CPar
IntNum := Number
Number := Digit Digit*

Tokens:
OPar := (
CPar := )
AddOperator := + | -
MultOperator := * | /
PowOperator := ^
Digit := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
*/

TOKEN : /* PARENTHESES */
{
	< OPAR : "(" >
	| < CPAR : ")" >
}

TOKEN : /* OPERATORS */
{
	< PLUS : "+" >
	| < MINUS : "-" >
	| < MULT : "*" >
	| < DIV : "/" >
	| < POWER : "^" >
}

// TOKEN : /* NUMBER format for real numbers and integers */
// { 
// 	< NUMBER : <REAL> | <INTEGER> >
// 	| < REAL : <INTEGER> "." <INTEGER> | <INTEGER> "." | "." <INTEGER> >
// 	| < INTEGER : <DIGITS> >
// 	| < #DIGITS : (["0"-"9"])+ >
// }

TOKEN : { < NUMBER : <REAL> | <INTEGER> > }
TOKEN : { < REAL : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> > }
TOKEN : { < INTEGER : <DIGITS> > }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

TOKEN :
{
	< EOL : "\r" | "\n" | "\r\n" >
}

TOKEN : { <HELP: "h"> }

TOKEN :
{
	<QUIT: "q" | "Q" >
}

/* specify the parser */

void Start(PrintStream printStream) throws NumberFormatException :
{
	double value;
}
{
	(
	 value = Expression()
	 <EOL>
	 { printStream.println( "=> " + value ); }
	 { printStream.print("=? "); }
	 |
	 <HELP>
	 <EOL>
	 { printStream.println("HELP - SMLI Spec:"); }
	 { printStream.println("add: 'r1 + r2'"); }
	 { printStream.println("subtract: 'r1 - r2'"); }
	 { printStream.println("multiply: 'r1 * r2'"); }
	 { printStream.println("divide: 'r1 / r2'"); }
	 { printStream.println("quit: 'q'"); }
	 { printStream.print("=? "); }
	)*
		<QUIT>
} 

/* Expression: Consists of Operands (arguments of +|- operation) */
double Expression() throws NumberFormatException :
{
	double i ;
	double value ; 
}
{
	value = Operand()
	(
	 <PLUS>
	 i = Operand()
	 { value = value + i ; }
	 |
	 <MINUS>
	 i = Operand()
	 { value = value - i ; }
	)*
	{ return value ; }
}

/* Operand: consists of Factors (arguments of *|/ operation) */
double Operand() throws NumberFormatException :
{
	double i ;
	double value ;
}
{
	value = Factor()
	(
		<MULT>
		i = Factor()
		{ value = value * i ; }
		|
		<DIV>
		i = Factor()
		{ value = value / i ; }
	)*

	{ return value ; }
}

/* Factor: consists of a real number and an int power */
double Factor() throws NumberFormatException :
{
	double power ;
	double value ;
}
{
	value = RealNum()
	(
		<POWER>
		power = RealNum()
		{ value =  Math.pow(value, power) ; }
	)*

	{ return value ; }
}

int IntNum() throws NumberFormatException :
{
	Token t ;
	int value ;
}
{
	t = <INTEGER>

	{ return Integer.parseInt( t.image ) ; }
	|
	<MINUS>
	t = <INTEGER>
	{ return (Integer.parseInt(t.image) * -1) ; }

}


double RealNum() throws NumberFormatException :
{
	Token t ;
	double value ;
}
{
	t = <NUMBER>
	{ value = Double.parseDouble (t.image); }
	{ return value ; }
	|
	<OPAR>
	value = Expression()
	<CPAR>
	{ return value ; }
	|
	<MINUS>
	t = <NUMBER>
	{ value = (Double.parseDouble(t.image) * -1); }

	{ return value ; }
}
