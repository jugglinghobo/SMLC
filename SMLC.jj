/**
 * SMLC v2 - Simple Math Language Parser v2
 * Parser for Parsing SML v1 with additional features:
 * * support for sin(), cos(), tan()
 * * support for real numbers
 * * support for terminating interactive mode with q
 */
options
{
	static = false;
}

PARSER_BEGIN(SMLC)
	package smlc;

	import java.io.PrintStream ;

	public class SMLC {
		public static void main(String args []) throws ParseException, TokenMgrError {
			SMLC parser = new SMLC( System.in ) ;
			System.out.println("Welcome to SMLI V2 - The Interactive SML Parser");
			System.out.println("Please enter your SML expression");
			System.out.print("=? ");

			parser.Start(System.out) ;
		}
	}

PARSER_END(SMLC)

/*
GRAMMAR:
Nonterminals:
Start := (Expression EOL | HELP)* | QUIT | EOF
Expression := MultExpression ADDOP MultExpression
MultExpression := PowExpression MULTOP PowExpression
PowExpression := TrigExpression POWOP TrigExpression
TrigExpression := Numerical | TRIGFUN Numerical
Numerical := Number | OPAR Expression CPAR
Number := Digits | Digits.Digits | Digits. | .Digits
Digits := DIGIT DIGIT*

Terminals (Tokens):
OPAR := (
CPAR := )
TRIGFUN := sin | cos | tan
ADDOP := + | -
MULTOP := * | /
POWOP := ^
DIGIT := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
*/


SKIP : { " " }

TOKEN : /* PARENTHESES */
{
	< OPAR : "(" >
	| < CPAR : ")" >
}

TOKEN : /* TRIG FUNCTIONS */
{
	< SIN : "sin" | "SIN" >
	| < COS : "cos" | "COS" >
	| < TAN : "tan" | "TAN" >
}

TOKEN : /* OPERATORS */
{
	< PLUS : "+" >
	| < MINUS : "-" >
	| < MULT : "*" >
	| < DIV : "/" >
	| < POWER : "^" >
}

TOKEN : { < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> > }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

TOKEN :
{
	< EOL : "\r" | "\n" | "\r\n" >
}

TOKEN : { <HELP : "h"> }

TOKEN : { <QUIT : "q" | "Q" > }

/* specify the parser */

void Start(PrintStream printStream) throws NumberFormatException :
{
	double value;
}
{
	(
	 value = Expression()
	 <EOL>
	 { printStream.println( "=> " + value ); }
	 { printStream.print("=? "); }
	 |
	 <HELP>
	 <EOL>
	 { printStream.println("HELP - SMLI Spec:"); }
	 { printStream.println("add: 'r1 + r2'"); }
	 { printStream.println("subtract: 'r1 - r2'"); }
	 { printStream.println("multiply: 'r1 * r2'"); }
	 { printStream.println("divide: 'r1 / r2'"); }
	 { printStream.println("quit: 'q'"); }
	 { printStream.print("=? "); }
	)*
	(
		<QUIT>
		{ printStream.println("Goodbye"); }
		|
		<EOF>
		{ printStream.println("Goodbye"); }
		)
} 

/* Expression: Consists of Operands (arguments of +|- operation) */
double Expression() throws NumberFormatException :
{
	double i ;
	double value ; 
}
{
	value = MultExpression()
	(
	 <PLUS>
	 i = MultExpression()
	 { value = value + i ; }
	 |
	 <MINUS>
	 i = MultExpression()
	 { value = value - i ; }
	)*
	{ return value ; }
}

/* Operand: consists of Factors (arguments of *|/ operation) */
double MultExpression() throws NumberFormatException :
{
	double i ;
	double value ;
}
{
	value = PowExpression()
	(
		<MULT>
		i = PowExpression()
		{ value = value * i ; }
		|
		<DIV>
		i = PowExpression()
		{ value = value / i ; }
	)*

	{ return value ; }
}

/* PowExpression: a TrigExpression to the power of the result of a trig expression */
double PowExpression() throws NumberFormatException :
{
	double power ;
	double value ;
}
{
	value = TrigExpression()
	(
		LOOKAHEAD(2)
		<POWER>
		power = PowExpression()
		{ value =  Math.pow(value, power) ; }
	)*
	{ return value ; }
}

double TrigExpression() throws NumberFormatException :
{
	double value ;
}
{
	value = Num()
	{ return value; }
	|
	(
	 <SIN>
	 value = Num()
	 { return Math.sin(value); }
	 |
	 <COS>
	 value = Num()
	 { return Math.cos(value); }
	 |
	 <TAN>
	 value = Num()
	 { return Math.tan(value); }
	)*
}

double Num() throws NumberFormatException :
{
	Token t ;
	double value ;
}
{
	t = <NUMBER>
	{ value = Double.parseDouble (t.image); }
	{ return value ; }
	|
	<OPAR>
	value = Expression()
	<CPAR>
	{ return value ; }
	|
	<MINUS>
	t = <NUMBER>
	{ value = (Double.parseDouble(t.image) * -1); }

	{ return value ; }
}
