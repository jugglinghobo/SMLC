/**
 * SMLP v2 - Simple Math Language Parser v2
 * Parser for Parsing SML v1 with additional features:
 * * support for sin(), cos(), tan()
 * * support for real numbers
 */
options
{
	static = false;
}

PARSER_BEGIN(SMLC)
	package smlp;

	import java.math.BigDecimal;

	public class SMLP {
		public static void main(String args []) throws ParseException, TokenMgrError {
			SMLP parser = new SMLP( System.in ) ;
			BigDecimal val ;
			System.out.println( "SMLP V2 - Now with 3 more operations!" ) ;
			System.out.println( "Please enter your SML expression" ) ;
			while (true) {
				System.out.print("=? ") ;
				val = parser.Start() ;
				System.out.println(val) ;
			}

		}
	}

PARSER_END(SMLP)

	/* lexical analyzer */
	SKIP :
{
	" "
}

/*
Nonterminals:
Start := Expression
Expression := MultExpression AddOperator MultExpression
MultExpression := ExpExpression MultOperator ExpExpression
ExpExpression := RealNum PowOperator IntNum
RealNum := Number | OPar Expression CPar
IntNum := Number
Number := Digit Digit*

Tokens:
OPar := (
CPar := )
AddOperator := + | -
MultOperator := * | /
PowOperator := ^
Digit := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
*/

TOKEN : /* PARENTHESES */
{
	< OPAR : "(" >
	| < CPAR : ")" >
}

TOKEN : /* OPERATORS */
{
	< PLUS : "+" >
	| < MINUS : "-" >
	| < MULT : "*" >
	| < DIV : "/" >
	| < POWER : "^" >
}

TOKEN : /* NUMBER format for real numbers and integers */
{ 
	< #DIGITS : (["0"-"9"])+ >
	| < INTEGER : <DIGITS> >
	| < REAL : <INTEGER> "." <INTEGER> | <INTEGER> "." | "." <INTEGER> >
	| < NUMBER : <REAL> | <INTEGER> >
}

TOKEN :
{
	< EOL : "\r" | "\n" | "\r\n" >
}

/* specify the parser */

BigDecimal Start() throws NumberFormatException :
{
	BigDecimal value ; 
}
{
	{ value = Expression() ; }
	<EOL>
	{ return value ; }
}

/* Expression: Consists of Operands (arguments of +|- operation) */
BigDecimal Expression() throws NumberFormatException :
{
	BigDecimal i ;
	BigDecimal value ; 
}
{
	{ value = Operand() ; }
	(
		<PLUS>
		{ i = Operand() ; }
		{ value = value.add(i) ; }
		|
		<MINUS>
		{ i = Operand() ; }
		{ value = value.subtract(i) ; }
	)*
	{ return value ; }
}

/* Operand: consists of Factors (arguments of *|/ operation) */
BigDecimal Operand() throws NumberFormatException :
{
	BigDecimal i ;
	BigDecimal value ;
}
{
	{ value = Factor() ; }
	(
		<MULT>
		{ i = Factor() ; }
		{ value = value.multiply(i) ; }
		|
		<DIV>
		{ i = Factor() ; }
		{ value = value.divide(i) ; }
	)*

	{ return value ; }
}

/* Factor: consists of a real number and an int power */
BigDecimal Factor() throws NumberFormatException :
{
	int power ;
	BigDecimal value ;
}
{
	{ value = RealNum() ; }
	(
		<POWER>
		{ power = IntNum() ; }
		{ value =  value.pow(power) ; }
	)*

	{ return value ; }
}

int IntNum() throws NumberFormatException :
{
	Token t ;
	int value ;
}
{
	t = <INTEGER>

	{ return Integer.parseInt( t.image ) ; }
}


BigDecimal RealNum() throws NumberFormatException :
{
	Token t ;
	BigDecimal value ;
}
{
	t = <NUMBER>
	{ return new BigDecimal (t.image).setScale(1) ; }
	|
	<OPAR>
	{ value = Expression() ; }
	<CPAR>

	{ return value ; }
}
