/**
 * A first example â€” adding integers.
 */
options
{
	static = false;
}

PARSER_BEGIN(Adder)
	package adder;

	public class Adder {
		public static void main(String args []) throws ParseException, TokenMgrError {
			Adder parser = new Adder( System.in ) ;
			int val = parser.Start();
			System.out.println(val);
		}
	}

PARSER_END(Adder)

	/* lexical analyzer */
	SKIP :
{
	" "
		| "\r"
		| "\n"
		| "\r\n"
}

/*
Nonterminals:
Start := Expression
Expression := MultExpression AddOperator MultExpression
MultExpression := ExpExpression MultOperator ExpExpression
ExpExpression := PrimaryExpression PowOperator ExpExpression
PrimaryExpression := Number | OPar Expression CPar
Number := Integer Integer*

Tokens:
OPar := (
CPar := )
AddOperator := + | -
MultOperator := * | /
PowOperator := ^
Integer := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
*/

TOKEN : /* PARENTHESES */
{
	< OPAR : "(" >
	| < CPAR : ")" >
}

TOKEN : /* OPERATORS */
{
	< PLUS : "+" >
	| < MINUS : "-" >
	| < MULT : "*" >
	| < DIV : "/" >
	| < POWER : "^" >
}

TOKEN :
{
	< NUMBER : ([ "0"-"9" ])+ >
}

/* specify the parser */

int Start() throws NumberFormatException :
{
	int value ; 
}
{
	{ value = Expression() ; }
	<EOF>
	{ return value ; }
}

/* Expression: Consists of Operands (arguments of +|- operation) */
int Expression() throws NumberFormatException :
{
	int i ;
	int value ; 
}
{
	{ value = Operand() ; }
	(
		<PLUS>
		{ i = Operand() ; }
		{ value += i ; }
		|
		<MINUS>
		{ i = Operand() ; }
		{ value -= i ; }
	)*
	{ return value ; }
}

/* Operand: consists of Factors (arguments of *|/ operation) */
int Operand() throws NumberFormatException :
{
	int i ;
	int value ;
}
{
	{ value = Factor() ; }
	(
		<MULT>
		{ i = Factor() ; }
		{ value *= i ; }
		|
		<DIV>
		{ i = Factor() ; }
		{ value /= i ; }
	)*

	{ return value ; }
}

/* Factor: consists of Primaries (numbers) */
int Factor() throws NumberFormatException :
{
	int i ;
	int power ;
	int value ;
}
{
	{ value = Primary() ; }
	(
		<POWER>
		{ power = Factor() ; }
		{ value = (int) Math.pow ( value, power ) ; }
	)*

	{ return value ; }
}


int Primary() throws NumberFormatException :
{
	Token t ;
	int value ;
}
{
	t = <NUMBER>
	{ return Integer.parseInt ( t.image ) ; }
	|
	<OPAR>
	{ value = Expression() ; }
	<CPAR>

	{ return value ; }
}
