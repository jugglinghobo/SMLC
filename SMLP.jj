/**
 * SMLP v2 - Simple Math Language Parser v2
 * Parser for Parsing SML v1 with additional features:
 * * support for sin(), cos(), tan()
 * * support for real numbers
 */
options
{
	static = false;
}

PARSER_BEGIN(SMLP)
	package smlp;

	public class SMLP {
		public static void main(String args []) throws ParseException, TokenMgrError {
			SMLP parser = new SMLP( System.in ) ;
			double val = parser.Start();
			System.out.println(val);
		}
	}

PARSER_END(SMLP)

	/* lexical analyzer */
	SKIP :
{
	" "
		| "\r"
		| "\n"
		| "\r\n"
}

/*
Nonterminals:
Start := Expression
Expression := MultExpression AddOperator MultExpression
MultExpression := ExpExpression MultOperator ExpExpression
ExpExpression := PrimaryExpression PowOperator ExpExpression
PrimaryExpression := Number | OPar Expression CPar
Number := Digit Digit*

Tokens:
OPar := (
CPar := )
AddOperator := + | -
MultOperator := * | /
PowOperator := ^
Digit := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
*/

TOKEN : /* PARENTHESES */
{
	< OPAR : "(" >
	| < CPAR : ")" >
}

TOKEN : /* OPERATORS */
{
	< PLUS : "+" >
	| < MINUS : "-" >
	| < MULT : "*" >
	| < DIV : "/" >
	| < POWER : "^" >
}

TOKEN : /* NUMBER format for Floating point precision */
{ 
	< NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> >
	| < #DIGITS : (["0"-"9"])+ >
}

/* specify the parser */

double Start() throws NumberFormatException :
{
	double value ; 
}
{
	{ value = Expression() ; }
	<EOF>
	{ return value ; }
}

/* Expression: Consists of Operands (arguments of +|- operation) */
double Expression() throws NumberFormatException :
{
	double i ;
	double value ; 
}
{
	{ value = Operand() ; }
	(
		<PLUS>
		{ i = Operand() ; }
		{ value += i ; }
		|
		<MINUS>
		{ i = Operand() ; }
		{ value -= i ; }
	)*
	{ return value ; }
}

/* Operand: consists of Factors (arguments of *|/ operation) */
double Operand() throws NumberFormatException :
{
	double i ;
	double value ;
}
{
	{ value = Factor() ; }
	(
		<MULT>
		{ i = Factor() ; }
		{ value *= i ; }
		|
		<DIV>
		{ i = Factor() ; }
		{ value /= i ; }
	)*

	{ return value ; }
}

/* Factor: consists of Primaries (numbers) */
double Factor() throws NumberFormatException :
{
	double i ;
	double power ;
	double value ;
}
{
	{ value = Primary() ; }
	(
		<POWER>
		{ power = Factor() ; }
		{ value =  Math.pow ( value, power ) ; }
	)*

	{ return value ; }
}


double Primary() throws NumberFormatException :
{
	Token t ;
	double value ;
}
{
	t = <NUMBER>
	{ return Double.parseDouble ( t.image ) ; }
	|
	<OPAR>
	{ value = Expression() ; }
	<CPAR>

	{ return value ; }
}
